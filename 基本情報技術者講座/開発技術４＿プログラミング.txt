■コーディング

プログラミング
モジュール単位でコーディングをする作業
→レビューとデバック、モジュールの単体テスト（ユニットテスト）

コーディング
→ソフトウェア詳細設計書に基づき、モジュール単位で作成

ソースコード
→人間が理解しやすいプログラム言語で書かれたコード

オブジェクトコード
→コンピュータが実行するのにてきした　形に変換したコード
→言語プロセッサを通して、オブジェクトコードを作成

コーディング基準
→繰り返し構造の階層：ネストの上限
→変数名などの命名規則、使用禁止命令
→コード内のインデンテーション（字下げ）など

コーディング支援
コード補完：入力しようとしているコードを入力する前に、選択肢を表示する機能

コードオーディタ：ソースコードの書き方のルールに違反していないかチェック

シンタックスハイライト：ソースコードの一部分を異なる分類ごとに色やフォントで表示する機能。視覚的に把握しやすくなる

コードレビュー：使われていない命令がないか、不正な変数名がないか誤りがないかチェック

→コードインスペクション：こーどとソフトウェア詳細仕様書と見比べるコードレビューのこと
→ピアコードレビュー：一人でコードを確認しながらレビューを行う
→共同レビュー：複数人でコードレビュー
→メトリクス計測：必要以上に複雑なコードになっていないか確認するために行数や分岐の数を計測・分析する



デバックと単体テスト

デバック：バグを取り除く
　→静的解析：プログラムを動かさずに開発環境のデバック機能を使ってテストを行う机上デバック
　→動的テスト：デバッカを利用して実際にプログラムを動かしてテスト

デバッカを利用したデバック
→トレーサ：コードを１行ずつ実行しながら処理の順序やメモリの内容を確認。ブレイクポイントを設定し、コードの実行を途中で止めながらデバックを進める
→アサーション：コードの任意の位置に確認条件をチェックする命令を入力し、その動きを確認
→ダンプ：コードを実行したときのメモリの内容をファイルに出力して確認
　→メモリダンプ：異常終了時などのタイミングでメモリの内容を出力
　→スナップショットダンプ：特定のタイミングでメモリの内容を出力


単体テスト
→作成したモジュールがソフトウェア詳細設計書通りに動作するか
→テストケースを用意。（テスト用のデータを用意）

テストケース
・命令網羅：プログラムのすべての命令を網羅して確認
・判定条件網羅：判定結果がそれぞれ１回は出力される
・条件網羅：条件文の可能なすべての結果をすくなくとも１回テストする
・複数条件網羅：複数条件で可能なすべての結果を少なくても１回は確認する

プログラミングの評価
・単体テスト後、新園手レビューをし、評価
・追跡可能性（仕様書とコードの箇所が相互参照できるか）


テストの工程








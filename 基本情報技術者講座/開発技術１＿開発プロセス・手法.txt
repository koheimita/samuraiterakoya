■開発プロセス・手法

ソフトウェア設計手法①

・データ中心アプローチ
→業務の内容や流れをもとにデータベースを作成し、データベースを中心にシステム設計をお行う
→E-R図やDFDなどの活用、リレーショナル型データベースを構築


・オブジェクト指向設計
→データ中心あぷろーちの手法の一つ
→属性（データ）とメソッド（データ操作の手続き）をカプセル化（一体化）したオブジェクト単位でプログラムを設計
→オブジェクトごとに設計

→クラス：オブジェクトのひな型。変数を保存する場所。メソッドを定義したもの
　→インスタンス：クラスから生成されたオブジェクトの実体

→継承（インヘリタンス）
　→既存のクラスを受け継いで拡張、変更を加えて新しいクラスを作成
　　→すーぱクラス
　　→サブクラス
　
　（特化）抽象的なスーパークラスから具体的なサブクラスを生成
　（汎化）複数の具体的なサブクラスから共通するデータやメソッドをスーパークラスで抽象的に定義

　（関連）上下関係ではなく、クラスとクラスが関係をもつこと
　（集約）複数の部分クラスによってつのクラスを構成すること
　（分解）１つのクラスを複数のクラスに分けること

＜オブジェクト間の連携＞
オブジェクトはほかのオブジェクトからメッセージ（命令）を受け取って処理を行う

ポリモフィズム（多態性）
→同じメソッド（処置）でもオブジェクトの内容によって処理の内容が変わる

UML（統一モデリング言語）
→オブジェクト指向設計の図を作る統一表記法

■プロセス中心アプローチ
→業務プロセス中心にシステム設計
→構造化手法（構造化プログラミング）：機能面と構造面から段階的に詳細化し開発

→構造化設計
　→ジャクソン法：基本、連続、繰り返し、選択の４つの図式を用いて、データ構造とプログラム構造を階層化する
　→ワーニエ法：入出力データの構造に着目して、順次・選択・繰り返しの制御構造でプログラムを展開

＜＞チャート図
構造化チャート：論理の構造化を図的に表現
NSチャート：矢印や線を使用せず、四角い枠の組み合わせて表現
HIPOチャート：システムの機能構造を階層的に図式化し、入力・処理・出力の関係をトップダウン方式で記述

■ソフトウェアパターン
→ソフトウェア開発の中でたびたび出現する出来事や問題から得られる知識や解決策を再利用できるように抽象化・形式化してまとめたもの

→アーキテクチャパターン：システム全体の構造をパターン化
→デザインパターン：プログラム設計のパターン、主にオブジェクト指向設計に用いる。再利用性の高いパターンを作成

■ソフトウェア開発モデル

①ウォーターフォールモデル
→段階的にソフトウェア開発を進める

②スパイラルモデル
→システムの一部分を開発し、ユーザが確認・フィードバックをし、再分析・設計・開発を繰り返す

③プロトタイピングモデル
→試作品を作成し、評価を行い、開発を進める
→RAD：プロトタイピングモデルの1っ種で開発期間をあらかじめきめて、期間内ですすめる。


④アジャイル開発：素早く無駄なく開発（他社に遅れないような）

アジャイルソフトウェア開発宣言
雑にならないように。

スクラム：チームで短期間で効率的に開発
→ふりかえり（レトロすぺくてぃぶ）を日常的に行い、

XP:エクストリームプログラミング
→ユーザー要求や仕様変更などのリスク軽減のため、ユーザと開発間のコミュニケーションを大事にする
→XPプラクティス：共同、開発、管理者、顧客

ペアプログラミング：二人一組で同じ画面を見ながら１つのプログラムを書く、レビューを行いながら
テスト駆動開発：最小にテストケースを作成、それが動作するために必要なものはなにか

ユーザストーリ：「誰が」「なんのために」「何をしたいのか」を短い文章にまとめ、依頼元の要求と認識の誤差が生じないようにする

インテレーション・スプリント（アジャイル開発の一連の工程を１～２週間の短い期間で繰り返す
XP＝インテレーション　
スクラム＝スプリント


■共通フレーム
開発の上で、ユーザとの齟齬がないようにISOが

プロセス成熟度：開発と保守のせい
CMM（能力成熟度モデル）
→開発能力を成熟度という水準で判定し、その判定をもとに能力向上を図り、より適切なプロセス管理ができる組織になるための指針を体系化した指標

CMMI（能力成熟度モデル統合）
→CMMの発展、ハードウェアや人的側面（コミュニケーション、リーダシップ）なども評価対象とｓれる

プロセス成熟度のレベル










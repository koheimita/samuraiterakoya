■ソフトウェアコンポーネントウェア
→コンポーネントを組み合わせること

物理データ設計
→ファイルの編成、データベースの設計


入出力詳細設計
→ラジオボタン、プルダウンメニュー、印刷の時の配置、GUI要素の設計、入力データのチェック方式

■7ソフトウェア詳細設計
→ソフトウェアコンポーネントをモジュールに分割

→構造化プログラミング：ソフトウェア全体を細かな単位に分割して処理を記述していく
　→メインルーチン（主モジュール）：モジュール分割時のお元になる大きなプログラム
　→サブルーチン：（サブモジュール）：分割した通災単位のプログラム

ソフトウェア詳細設計の流れ
１．モジュール分割：モジュール仕様を明確化して、ソフトウェア詳細設計書を作成する
　→STS分割：データの入力処理、変換処理、出力処理の３つのモジュールに分割
　→TR分割：データの種類により、実行所為rが決まる場合に、実行処理の種類ごとにモジュールを分割
　→共通機能分割：共通している種類をモジュール分割
　→ジャクソン法：基本・連ぞ応・繰り返し・選択の４つの図式を用いk手、データ構造とプログラム構造を階層化
　→わーにえ法：データがいつどこで、何回使われるかをもとに順次・選択・繰り返しの制御構造で分割

２・インターフェース設計
　→ハードウェアを含めた視認性・操作性・応答性のソフトウェアの機能・処理方法を考慮して設計

３．単体テストの設計
　→

４．ソフトウェア結合テストの設計
→チャックリストの作成


■モジュール分割基準
→分割量：大きくなりすぎないために、ステップ数による分割基準
→独立性：モジュールを修正したときに、ほかのモジュールに影響を与えないこと。強度・結合度
　→強度：機能の関連の強さ。強度が高いほど独立性が高くなる
　→パラメータ：プログラムのどうだ条件を与えるための情報のこと。受け渡されるパラメータによって、モジュールは昨日の動作を変更する
→結合度：モジュール間のデータのやり取りなどの関連性。関連性が低いほど、独立性は高くなる


■ソフトウェ設計の評価
→ソフトウェアの品質：品質特性を考慮する必要がある。JISX0129（ISO/IEC9126）
　→機能性
　→信頼性
　→使用性
　→効率性
　→保守性
　→移植性

利用時の品質特性
→有効性
→生産性
→安全性
→満足性
